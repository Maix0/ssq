/* automatically generated by rust-bindgen 0.56.0 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SSQ_GS_TIMEOUT: u32 = 1;
pub const SSQ_LOG_TIMEOUT: u32 = 2;
pub const SSQ_MS_TIMEOUT: u32 = 4;
pub const SSQ_RCON_TIMEOUT: u32 = 8;
pub type DWORD = ::std::os::raw::c_ulong;
pub type PDWORD = *mut ::std::os::raw::c_ulong;
pub type LPDWORD = *mut ::std::os::raw::c_ulong;
pub type BYTE = ::std::os::raw::c_uchar;
pub type PBYTE = *mut ::std::os::raw::c_uchar;
pub type LPBYTE = *mut ::std::os::raw::c_uchar;
pub type BOOL = ::std::os::raw::c_int;
pub type PBOOL = *mut ::std::os::raw::c_int;
pub type LPBOOL = *mut ::std::os::raw::c_int;
pub const SSQ_USA_EAST: ::std::os::raw::c_uint = 0;
pub const SSQ_USA_WEST: ::std::os::raw::c_uint = 1;
pub const SSQ_SOUTH_AMERICA: ::std::os::raw::c_uint = 2;
pub const SSQ_EUROPE: ::std::os::raw::c_uint = 3;
pub const SSQ_ASIA: ::std::os::raw::c_uint = 4;
pub const SSQ_AUSTRALIA: ::std::os::raw::c_uint = 5;
pub const SSQ_MIDDLE_EAST: ::std::os::raw::c_uint = 6;
pub const SSQ_AFRICA: ::std::os::raw::c_uint = 7;
pub const SSQ_WORLD: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const SSQ_BATCH_REPLY_CALLBACK: ::std::os::raw::c_uint = 0;
pub const SSQ_LOG_REPLY_CALLBACK: ::std::os::raw::c_uint = 1;
pub const SSQ_RCON_REPLY_CALLBACK: ::std::os::raw::c_uint = 2;
pub const SSQ_RULES_REPLY_CALLBACK: ::std::os::raw::c_uint = 3;
pub const SSQ_LOG_THREAD_NOTIFY: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SSQ_BATCH_REPLY {
    pub num_servers: ::std::os::raw::c_long,
    pub data_size: ::std::os::raw::c_long,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SSQ_BATCH_REPLY() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_BATCH_REPLY>(),
        24usize,
        concat!("Size of: ", stringify!(SSQ_BATCH_REPLY))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_BATCH_REPLY>(),
        8usize,
        concat!("Alignment of ", stringify!(SSQ_BATCH_REPLY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_BATCH_REPLY>())).num_servers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_BATCH_REPLY),
            "::",
            stringify!(num_servers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_BATCH_REPLY>())).data_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_BATCH_REPLY),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_BATCH_REPLY>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_BATCH_REPLY),
            "::",
            stringify!(data)
        )
    );
}
pub type PSSQ_BATCH_REPLY = *mut SSQ_BATCH_REPLY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SSQ_INFO_REPLY {
    pub version: ::std::os::raw::c_char,
    pub hostname: [::std::os::raw::c_char; 256usize],
    pub map: [::std::os::raw::c_char; 32usize],
    pub game_directory: [::std::os::raw::c_char; 32usize],
    pub game_description: [::std::os::raw::c_char; 256usize],
    pub app_id: ::std::os::raw::c_short,
    pub num_players: ::std::os::raw::c_char,
    pub max_players: ::std::os::raw::c_char,
    pub num_of_bots: ::std::os::raw::c_char,
    pub dedicated: ::std::os::raw::c_char,
    pub os: ::std::os::raw::c_char,
    pub password: ::std::os::raw::c_char,
    pub secure: ::std::os::raw::c_char,
    pub game_version: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_SSQ_INFO_REPLY() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_INFO_REPLY>(),
        620usize,
        concat!("Size of: ", stringify!(SSQ_INFO_REPLY))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_INFO_REPLY>(),
        2usize,
        concat!("Alignment of ", stringify!(SSQ_INFO_REPLY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).hostname as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).map as *const _ as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).game_directory as *const _ as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(game_directory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).game_description as *const _ as usize },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(game_description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).app_id as *const _ as usize },
        578usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(app_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).num_players as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(num_players)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).max_players as *const _ as usize },
        581usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(max_players)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).num_of_bots as *const _ as usize },
        582usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(num_of_bots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).dedicated as *const _ as usize },
        583usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(dedicated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).os as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).password as *const _ as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).secure as *const _ as usize },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_INFO_REPLY>())).game_version as *const _ as usize },
        587usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_INFO_REPLY),
            "::",
            stringify!(game_version)
        )
    );
}
pub type PSSQ_INFO_REPLY = *mut SSQ_INFO_REPLY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SSQ_PLAYER_ITEM {
    pub index: ::std::os::raw::c_char,
    pub player_name: [::std::os::raw::c_char; 32usize],
    pub kills: ::std::os::raw::c_long,
    pub time_connected: f32,
}
#[test]
fn bindgen_test_layout_SSQ_PLAYER_ITEM() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_PLAYER_ITEM>(),
        56usize,
        concat!("Size of: ", stringify!(SSQ_PLAYER_ITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_PLAYER_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(SSQ_PLAYER_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_ITEM>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_ITEM),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_ITEM>())).player_name as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_ITEM),
            "::",
            stringify!(player_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_ITEM>())).kills as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_ITEM),
            "::",
            stringify!(kills)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_ITEM>())).time_connected as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_ITEM),
            "::",
            stringify!(time_connected)
        )
    );
}
pub type PSSQ_PLAYER_ITEM = *mut SSQ_PLAYER_ITEM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SSQ_PLAYER_REPLY {
    pub num_players: ::std::os::raw::c_char,
    pub player: [SSQ_PLAYER_ITEM; 64usize],
}
#[test]
fn bindgen_test_layout_SSQ_PLAYER_REPLY() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_PLAYER_REPLY>(),
        3592usize,
        concat!("Size of: ", stringify!(SSQ_PLAYER_REPLY))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_PLAYER_REPLY>(),
        8usize,
        concat!("Alignment of ", stringify!(SSQ_PLAYER_REPLY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_REPLY>())).num_players as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_REPLY),
            "::",
            stringify!(num_players)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_PLAYER_REPLY>())).player as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_PLAYER_REPLY),
            "::",
            stringify!(player)
        )
    );
}
pub type PSSQ_PLAYER_REPLY = *mut SSQ_PLAYER_REPLY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SSQ_RULES_REPLY {
    pub num_rules: ::std::os::raw::c_short,
    pub data_size: ::std::os::raw::c_long,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SSQ_RULES_REPLY() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_RULES_REPLY>(),
        24usize,
        concat!("Size of: ", stringify!(SSQ_RULES_REPLY))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_RULES_REPLY>(),
        8usize,
        concat!("Alignment of ", stringify!(SSQ_RULES_REPLY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_RULES_REPLY>())).num_rules as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_RULES_REPLY),
            "::",
            stringify!(num_rules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_RULES_REPLY>())).data_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_RULES_REPLY),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_RULES_REPLY>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_RULES_REPLY),
            "::",
            stringify!(data)
        )
    );
}
pub type PSSQ_RULES_REPLY = *mut SSQ_RULES_REPLY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union SSQ_REPLY_UNION {
    pub batch_reply: PSSQ_BATCH_REPLY,
    pub log_reply: *mut ::std::os::raw::c_char,
    pub rules_reply: PSSQ_RULES_REPLY,
    pub rcon_reply: *mut ::std::os::raw::c_char,
    pub log_notify: BOOL,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_SSQ_REPLY_UNION() {
    assert_eq!(
        ::std::mem::size_of::<SSQ_REPLY_UNION>(),
        8usize,
        concat!("Size of: ", stringify!(SSQ_REPLY_UNION))
    );
    assert_eq!(
        ::std::mem::align_of::<SSQ_REPLY_UNION>(),
        8usize,
        concat!("Alignment of ", stringify!(SSQ_REPLY_UNION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_REPLY_UNION>())).batch_reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_REPLY_UNION),
            "::",
            stringify!(batch_reply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_REPLY_UNION>())).log_reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_REPLY_UNION),
            "::",
            stringify!(log_reply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_REPLY_UNION>())).rules_reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_REPLY_UNION),
            "::",
            stringify!(rules_reply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_REPLY_UNION>())).rcon_reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_REPLY_UNION),
            "::",
            stringify!(rcon_reply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SSQ_REPLY_UNION>())).log_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SSQ_REPLY_UNION),
            "::",
            stringify!(log_notify)
        )
    );
}
pub type PSSQ_REPLY_UNION = *mut SSQ_REPLY_UNION;
pub type SSQ_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: DWORD, arg2: PSSQ_REPLY_UNION) -> bool>;
extern "C" {
    pub fn SSQ_FormatBatchReply(
        batch_reply: PSSQ_BATCH_REPLY,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSQ_GetBatchReply(region: BYTE, filter: *mut ::std::os::raw::c_char) -> BOOL;
}
extern "C" {
    pub fn SSQ_GetInfoReply(info_reply: PSSQ_INFO_REPLY) -> BOOL;
}
extern "C" {
    pub fn SSQ_GetPlayerReply(player_reply: PSSQ_PLAYER_REPLY) -> BOOL;
}
extern "C" {
    pub fn SSQ_GetRconReply(
        password: *mut ::std::os::raw::c_char,
        command: *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn SSQ_GetRuleName(
        rules_reply: PSSQ_RULES_REPLY,
        index: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSQ_GetRuleValue(
        rules_reply: PSSQ_RULES_REPLY,
        index: ::std::os::raw::c_short,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SSQ_GetRulesReply() -> BOOL;
}
extern "C" {
    pub fn SSQ_Initialize(exit: BOOL) -> BOOL;
}
extern "C" {
    pub fn SSQ_Ping() -> DWORD;
}
extern "C" {
    pub fn SSQ_SetCallbackAddress(callback: SSQ_CALLBACK) -> BOOL;
}
extern "C" {
    pub fn SSQ_SetGameServer(address: *mut ::std::os::raw::c_char) -> BOOL;
}
extern "C" {
    pub fn SSQ_SetLogStatus(status: BOOL, port: ::std::os::raw::c_ushort) -> BOOL;
}
extern "C" {
    pub fn SSQ_SetMasterServer(address: *mut ::std::os::raw::c_char) -> BOOL;
}
extern "C" {
    pub fn SSQ_SetTimeout(type_: DWORD, timeout: ::std::os::raw::c_int) -> BOOL;
}
